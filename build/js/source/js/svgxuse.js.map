{"version":3,"sources":["svgxuse.js"],"names":["window","addEventListener","checkUseElems","tid","observeIfDone","cache","Object","create","clearTimeout","setTimeout","xlinkNS","base","bcr","fallback","href","i","inProgressCount","isHidden","Request","url","origin","origin2","hash","unobserveChanges","observer","debouncedCheck","observeChanges","subtree","documentElement","MutationObserver","observe","attributes","disconnect","removeEventListener","document","spec","useEl","setAttributeNS","attrUpdateFunc","setAttribute","onloadFunc","xhr","svg","body","x","createElement","onload","innerHTML","position","responseText","getElementsByTagName","height","style","firstChild","onerror","ontimeout","uses","length","getBoundingClientRect","ignore","getAttribute","getAttributeNS","split","left","right","top","bottom","width","undefined","XMLHttpRequest","getOrigin","location","withCredentials","createRequest","onErrorTimeout","abort","loc","a","protocol","host","winLoad"],"mappings":"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","file":"../../svgxuse.js","sourcesContent":["/*!\n * @copyright Copyright (c) 2017 IcoMoon.io\n * @license   Licensed under MIT license\n *            See https://github.com/Keyamoon/svgxuse\n * @version   1.2.6\n */\n/*jslint browser: true */\n/*global XDomainRequest, MutationObserver, window */\n(function() {\n  \"use strict\";\n  if (typeof window !== \"undefined\" && window.addEventListener) {\n    var cache = Object.create(null); // holds xhr objects to prevent multiple requests\n    var checkUseElems;\n    var tid; // timeout id\n    var debouncedCheck = function() {\n      clearTimeout(tid);\n      tid = setTimeout(checkUseElems, 100);\n    };\n    var unobserveChanges = function() {\n      return;\n    };\n    var observeChanges = function() {\n      var observer;\n      window.addEventListener(\"resize\", debouncedCheck, false);\n      window.addEventListener(\"orientationchange\", debouncedCheck, false);\n      if (window.MutationObserver) {\n        observer = new MutationObserver(debouncedCheck);\n        observer.observe(document.documentElement, {\n          childList: true,\n          subtree: true,\n          attributes: true\n        });\n        unobserveChanges = function() {\n          try {\n            observer.disconnect();\n            window.removeEventListener(\"resize\", debouncedCheck, false);\n            window.removeEventListener(\"orientationchange\", debouncedCheck, false);\n          } catch (ignore) {}\n        };\n      } else {\n        document.documentElement.addEventListener(\"DOMSubtreeModified\", debouncedCheck, false);\n        unobserveChanges = function() {\n          document.documentElement.removeEventListener(\"DOMSubtreeModified\", debouncedCheck, false);\n          window.removeEventListener(\"resize\", debouncedCheck, false);\n          window.removeEventListener(\"orientationchange\", debouncedCheck, false);\n        };\n      }\n    };\n    var createRequest = function(url) {\n      // In IE 9, cross origin requests can only be sent using XDomainRequest.\n      // XDomainRequest would fail if CORS headers are not set.\n      // Therefore, XDomainRequest should only be used with cross origin requests.\n      function getOrigin(loc) {\n        var a;\n        if (loc.protocol !== undefined) {\n          a = loc;\n        } else {\n          a = document.createElement(\"a\");\n          a.href = loc;\n        }\n        return a.protocol.replace(/:/g, \"\") + a.host;\n      }\n      var Request;\n      var origin;\n      var origin2;\n      if (window.XMLHttpRequest) {\n        Request = new XMLHttpRequest();\n        origin = getOrigin(location);\n        origin2 = getOrigin(url);\n        if (Request.withCredentials === undefined && origin2 !== \"\" && origin2 !== origin) {\n          Request = XDomainRequest || undefined;\n        } else {\n          Request = XMLHttpRequest;\n        }\n      }\n      return Request;\n    };\n    var xlinkNS = \"http://www.w3.org/1999/xlink\";\n    checkUseElems = function() {\n      var base;\n      var bcr;\n      var fallback = \"\"; // optional fallback URL in case no base path to SVG file was given and no symbol definition was found.\n      var hash;\n      var href;\n      var i;\n      var inProgressCount = 0;\n      var isHidden;\n      var Request;\n      var url;\n      var uses;\n      var xhr;\n\n      function observeIfDone() {\n        // If done with making changes, start watching for chagnes in DOM again\n        inProgressCount -= 1;\n        if (inProgressCount === 0) { // if all xhrs were resolved\n          unobserveChanges(); // make sure to remove old handlers\n          observeChanges(); // watch for changes to DOM\n        }\n      }\n\n      function attrUpdateFunc(spec) {\n        return function() {\n          if (cache[spec.base] !== true) {\n            spec.useEl.setAttributeNS(xlinkNS, \"xlink:href\", \"#\" + spec.hash);\n            if (spec.useEl.hasAttribute(\"href\")) {\n              spec.useEl.setAttribute(\"href\", \"#\" + spec.hash);\n            }\n          }\n        };\n      }\n\n      function onloadFunc(xhr) {\n        return function() {\n          var body = document.body;\n          var x = document.createElement(\"x\");\n          var svg;\n          xhr.onload = null;\n          x.innerHTML = xhr.responseText;\n          svg = x.getElementsByTagName(\"svg\")[0];\n          if (svg) {\n            svg.setAttribute(\"aria-hidden\", \"true\");\n            svg.style.position = \"absolute\";\n            svg.style.width = 0;\n            svg.style.height = 0;\n            svg.style.overflow = \"hidden\";\n            body.insertBefore(svg, body.firstChild);\n          }\n          observeIfDone();\n        };\n      }\n\n      function onErrorTimeout(xhr) {\n        return function() {\n          xhr.onerror = null;\n          xhr.ontimeout = null;\n          observeIfDone();\n        };\n      }\n      unobserveChanges(); // stop watching for changes to DOM\n      // find all use elements\n      uses = document.getElementsByTagName(\"use\");\n      for (i = 0; i < uses.length; i += 1) {\n        try {\n          bcr = uses[i].getBoundingClientRect();\n        } catch (ignore) {\n          // failed to get bounding rectangle of the use element\n          bcr = false;\n        }\n        href = uses[i].getAttribute(\"href\") ||\n          uses[i].getAttributeNS(xlinkNS, \"href\") ||\n          uses[i].getAttribute(\"xlink:href\");\n        if (href && href.split) {\n          url = href.split(\"#\");\n        } else {\n          url = [\"\", \"\"];\n        }\n        base = url[0];\n        hash = url[1];\n        isHidden = bcr && bcr.left === 0 && bcr.right === 0 && bcr.top === 0 && bcr.bottom === 0;\n        if (bcr && bcr.width === 0 && bcr.height === 0 && !isHidden) {\n          // the use element is empty\n          // if there is a reference to an external SVG, try to fetch it\n          // use the optional fallback URL if there is no reference to an external SVG\n          if (fallback && !base.length && hash && !document.getElementById(hash)) {\n            base = fallback;\n          }\n          if (uses[i].hasAttribute(\"href\")) {\n            uses[i].setAttributeNS(xlinkNS, \"xlink:href\", href);\n          }\n          if (base.length) {\n            // schedule updating xlink:href\n            xhr = cache[base];\n            if (xhr !== true) {\n              // true signifies that prepending the SVG was not required\n              setTimeout(attrUpdateFunc({\n                useEl: uses[i],\n                base: base,\n                hash: hash\n              }), 0);\n            }\n            if (xhr === undefined) {\n              Request = createRequest(base);\n              if (Request !== undefined) {\n                xhr = new Request();\n                cache[base] = xhr;\n                xhr.onload = onloadFunc(xhr);\n                xhr.onerror = onErrorTimeout(xhr);\n                xhr.ontimeout = onErrorTimeout(xhr);\n                xhr.open(\"GET\", base);\n                xhr.send();\n                inProgressCount += 1;\n              }\n            }\n          }\n        } else {\n          if (!isHidden) {\n            if (cache[base] === undefined) {\n              // remember this URL if the use element was not empty and no request was sent\n              cache[base] = true;\n            } else if (cache[base].onload) {\n              // if it turns out that prepending the SVG is not necessary,\n              // abort the in-progress xhr.\n              cache[base].abort();\n              delete cache[base].onload;\n              cache[base] = true;\n            }\n          } else if (base.length && cache[base]) {\n            setTimeout(attrUpdateFunc({\n              useEl: uses[i],\n              base: base,\n              hash: hash\n            }), 0);\n          }\n        }\n      }\n      uses = \"\";\n      inProgressCount += 1;\n      observeIfDone();\n    };\n    var winLoad;\n    winLoad = function() {\n      window.removeEventListener(\"load\", winLoad, false); // to prevent memory leaks\n      tid = setTimeout(checkUseElems, 0);\n    };\n    if (document.readyState !== \"complete\") {\n      // The load event fires when all resources have finished loading, which allows detecting whether SVG use elements are empty.\n      window.addEventListener(\"load\", winLoad, false);\n    } else {\n      // No need to add a listener if the document is already loaded, initialize immediately.\n      winLoad();\n    }\n  }\n}());\n"]}